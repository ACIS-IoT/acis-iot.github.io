mdp

//PA model with buffer size = 4
//properties in model.pctl

const int cr1 = 1; //Identity of the crane 1
const int cr2 = 2; //Identity of the crane 2
const int d;//Lifting height
const int MAX=2;//Buffer size
const int M=10;//Number of message sent

const int TAMPERLIFT = 0;
const int EMPTY = -1;

const double LAMBDA1=0.5;//pushing rate
const double LAMBDA2=0.5;//pulling rate

const double LAMBDA3=1-LAMBDA4;//transmission success probability
const double LAMBDA4;//attack probability

const int vx_s= -1;//Erroneous sender identity
const int vx_r = -1;//Erroneous receiver identity
const int vx = -1;//Erroneous payload generated from attacker

const int n =2;//Number of attackers


const int dr=1; //Identity of the drone

//Drone system
module Drone
  SCANNED_ID : [0..2] init cr1;

  m1_s: [-1..2]   init  dr;
  m1_r: [-1..2]   init  cr1;
  m1_ts: [-1..10] init 0;
  m1_pl: [-1..10] init d;

  Drone_l:[0..3] init 1;

[        ]     Drone_l=1 & (m1_ts<M)  -> (Drone_l'=2) & (m1_ts'=m1_ts+1);
[TRANSMIT_1]   Drone_l=2 & (m1_r=cr1)  -> (Drone_l'=3) & (m1_r'=cr2);
[TRANSMIT_2]   Drone_l=3 & (m1_r=cr2)  -> (Drone_l'=1) & (m1_r'=cr1);
endmodule


//MPS Connecor 1
module Connector_1

WRITE_1: [0..3] init 0;
READ_1 : [0..3] init 0;

BUFFER_1_s: [-1..2] init -1;

BUFFER_1_r: [-1..2] init -1;

BUFFER_1_ts: [-1..10] init -1;

BUFFER_1_pl: [-10..10] init -2;


BUFFER_2: [-1..2] init -1;

BUFFER_2_s: [-1..2] init -1;

BUFFER_2_r: [-1..2] init -1;

BUFFER_2_ts: [-1..10] init -1;

BUFFER_2_pl: [-10..10] init -2;

BUFFER_3: [-1..2] init -1;

BUFFER_3_s: [-1..2] init -1;

BUFFER_3_r: [-1..2] init -1;

BUFFER_3_ts: [-1..10] init -1;

BUFFER_3_pl: [-10..10] init -2;


BUFFER_4: [-1..2] init -1;

BUFFER_4_s: [-1..2] init -1;

BUFFER_4_r: [-1..2] init -1;

BUFFER_4_ts: [-1..10] init -1;

BUFFER_4_pl: [-10..10] init -2;

v_s: [-1..2] init -1;
v_r: [-1..2] init -1;
v_ts: [-1..10] init -1;
v_pl: [-10..10] init -2;




BUFFER_SIZE: [0..10] init 0;
C1_L : [1..6] init 1;


[INITIAL]  C1_L=1 & (BUFFER_SIZE<MAX | BUFFER_SIZE>0) ->  LAMBDA1:(C1_L'=2) + LAMBDA2:(C1_L'=4);

[TRANSMIT_1] C1_L=2 & BUFFER_SIZE<MAX  ->  LAMBDA3:(C1_L'=3) &(v_s'=m1_s)&(v_r'=m1_r)&(v_ts'=m1_ts)&(v_pl'=m1_pl) + LAMBDA4:(C1_L'=3) &(v_s'=vx_s)&(v_r'=vx_r)&(v_ts'=m1_ts)&(v_pl'=vx);

[FULL]     C1_L=2 & BUFFER_SIZE=MAX  ->  (C1_L'=1);

[PUSH_BUFFER_1]     C1_L=3 & BUFFER_SIZE<MAX & WRITE_1=0 ->  (C1_L'=1) & (WRITE_1'=1) & (BUFFER_1_s'=v_s) & (BUFFER_1_r'=v_r) & (BUFFER_1_ts'=v_ts) & (BUFFER_1_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);

[PUSH_BUFFER_2]     C1_L=3 & BUFFER_SIZE<MAX & WRITE_1=1 ->  (C1_L'=1) & (WRITE_1'=2)& (BUFFER_2'=1) & (BUFFER_2_s'=v_s) & (BUFFER_2_r'=v_r) & (BUFFER_2_ts'=v_ts) & (BUFFER_2_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);

[PUSH_BUFFER_3]     C1_L=3 & BUFFER_SIZE<MAX & WRITE_1=2 ->  (C1_L'=1) & (WRITE_1'=3)& (BUFFER_3'=1) & (BUFFER_3_s'=v_s) & (BUFFER_3_r'=v_r) & (BUFFER_3_ts'=v_ts) & (BUFFER_3_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);

[PUSH_BUFFER_4]     C1_L=3 & BUFFER_SIZE<MAX & WRITE_1=3 ->  (C1_L'=1) & (WRITE_1'=0)& (BUFFER_4'=1) & (BUFFER_4_s'=v_s) & (BUFFER_4_r'=v_r) & (BUFFER_4_ts'=v_ts) & (BUFFER_4_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);


[PULL_BUFFER_1]     C1_L=4 & BUFFER_SIZE>0   & READ_1=0 ->  (C1_L'=5) & (READ_1'=1) & (v_s'=BUFFER_1_s) & (v_r'=BUFFER_1_r) & (v_ts'=BUFFER_1_ts) & (v_pl'=BUFFER_1_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) ;

[PULL_BUFFER_2]     C1_L=4 & BUFFER_SIZE>0   & READ_1=1 ->  (C1_L'=5)& (READ_1'=2) & (v_s'=BUFFER_2_s) & (v_r'=BUFFER_2_r) & (v_ts'=BUFFER_2_ts) & (v_pl'=BUFFER_2_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) ;

[PULL_BUFFER_3]     C1_L=4 & BUFFER_SIZE>0   & READ_1=2 ->  (C1_L'=5)& (READ_1'=3) & (v_s'=BUFFER_3_s) & (v_r'=BUFFER_3_r) & (v_ts'=BUFFER_3_ts) & (v_pl'=BUFFER_3_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) ;

[PULL_BUFFER_4]     C1_L=4 & BUFFER_SIZE>0   & READ_1=3 ->  (C1_L'=5)& (READ_1'=0) & (v_s'=BUFFER_4_s) & (v_r'=BUFFER_4_r) & (v_ts'=BUFFER_4_ts) & (v_pl'=BUFFER_4_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) ;


[EMPTY]    C1_L=4 & BUFFER_SIZE=0    ->  (C1_L'=1);

[RECEIVE_C1]  C1_L=5 & (v_s>0) & (v_r>0)  & (v_ts>0) &  (v_pl>0)->  (C1_L'=1) & (v_s'=EMPTY) & (v_r'=EMPTY) & (v_ts'=EMPTY) & (v_pl'=EMPTY);

endmodule



//crane 1 component
module Crane_1
  LC1 : [0..3] init  1;
  m2_s: [-1..2] init EMPTY;
  m2_r: [-1..2] init EMPTY;
  m2_ts: [-1..10] init EMPTY;
  m2_pl: [-10..10] init EMPTY;


[RECEIVE_C1]   LC1=1 & (m2_s=EMPTY)& (m2_r=EMPTY)& (m2_ts=EMPTY)& (m2_pl=EMPTY)   -> (LC1'=2) & (m2_s'=v_s) & (m2_r'=v_r) & (m2_ts'=v_ts) & (m2_pl'=v_pl);
//External port LIFT 
[LIFT]       LC1=2   -> (LC1'=1) & (m2_s'=EMPTY) & (m2_r'=EMPTY) & (m2_ts'=EMPTY) & (m2_pl'=EMPTY);
endmodule


rewards "num_mess_c1"
   [RECEIVE_C1]  true : 1;
endrewards

rewards "num_mess_c2"
   [RECEIVE_C2]  true : 1;
endrewards

//MPS Connecor 2
module Connector_2


WRITE_2 : [0..3] init 0;

READ_2  : [0..3] init 0;

BUFFER2_1_s: [-1..2] init -1;

BUFFER2_1_r: [-1..2] init -1;

BUFFER2_1_ts: [-1..10] init -1;

BUFFER2_1_pl: [-10..10] init -2;


BUFFER2_2: [-1..2] init -1;

BUFFER2_2_s: [-1..2] init -1;

BUFFER2_2_r: [-1..2] init -1;

BUFFER2_2_ts: [-1..10] init -1;

BUFFER2_2_pl: [-10..10] init -2;


BUFFER2_3: [-1..2] init -1;

BUFFER2_3_s: [-1..2] init -1;

BUFFER2_3_r: [-1..2] init -1;

BUFFER2_3_ts: [-1..10] init -1;

BUFFER2_3_pl: [-10..10] init -2;

BUFFER2_4: [-1..2] init -1;

BUFFER2_4_s: [-1..2] init -1;

BUFFER2_4_r: [-1..2] init -1;

BUFFER2_4_ts: [-1..10] init -1;

BUFFER2_4_pl: [-10..10] init -2;

v2_s: [-1..2] init -1;
v2_r: [-1..2] init -1;
v2_ts: [-1..10] init -1;
v2_pl: [-10..10] init -2;

buffer_size2: [0..10] init 0;

C2_L : [1..6] init 1;

vid2: [-1..2] init EMPTY;

[INITIAL2]  C2_L=1 & (buffer_size2<MAX | buffer_size2>0) ->  LAMBDA1:(C2_L'=2) + LAMBDA2:(C2_L'=4);

[TRANSMIT_2] C2_L=2 & buffer_size2<MAX  ->  LAMBDA3:(C2_L'=3) &(v2_s'=m1_s)&(v2_r'=m1_r)&(v2_ts'=m1_ts)&(v2_pl'=m1_pl)+ LAMBDA4:(C2_L'=3) &(v2_s'=vx_s)&(v2_r'=vx_r)&(v2_ts'=vx_r)&(v2_pl'=vx);

[FULL2]     C2_L=2 & buffer_size2=MAX  ->  (C2_L'=1);

[PUSH_BUFFER2_1]     C2_L=3 & buffer_size2<MAX & WRITE_2=0 ->  (C2_L'=1) & (WRITE_2'=1)  & (BUFFER2_1_s'=v2_s) & (BUFFER2_1_r'=v2_r) & (BUFFER2_1_ts'=v2_ts) & (BUFFER2_1_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);

[PUSH_BUFFER2_2]     C2_L=3 & buffer_size2<MAX & WRITE_2=1 ->  (C2_L'=1)& (WRITE_2'=2)  & (BUFFER2_2_s'=v2_s) & (BUFFER2_2_r'=v2_r) & (BUFFER2_2_ts'=v2_ts) & (BUFFER2_2_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);

[PUSH_BUFFER2_3]     C2_L=3 & buffer_size2<MAX & WRITE_2=2 ->  (C2_L'=1)& (WRITE_2'=3)  & (BUFFER2_3_s'=v2_s) & (BUFFER2_3_r'=v2_r) & (BUFFER2_3_ts'=v2_ts) & (BUFFER2_3_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);

[PUSH_BUFFER2_4]     C2_L=3 & buffer_size2<MAX & WRITE_2=3 ->  (C2_L'=1)& (WRITE_2'=0)  & (BUFFER2_4_s'=v2_s) & (BUFFER2_4_r'=v2_r) & (BUFFER2_4_ts'=v2_ts) & (BUFFER2_4_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);



[PULL_BUFFER2_1]     C2_L=4 & buffer_size2>0   & READ_2=0  ->  (C2_L'=5)& (READ_2'=1) & (v2_s'=BUFFER2_1_s) & (v2_r'=BUFFER2_1_r) & (v2_ts'=BUFFER2_1_ts) & (v2_pl'=BUFFER2_1_pl) ;

[PULL_BUFFER2_2]     C2_L=4 & buffer_size2>0   & READ_2=1  ->  (C2_L'=5)& (READ_2'=2) & (v2_s'=BUFFER2_2_s) & (v2_r'=BUFFER2_2_r) & (v2_ts'=BUFFER2_2_ts) & (v2_pl'=BUFFER2_2_pl) & (buffer_size2'=buffer_size2-1);

[PULL_BUFFER2_3]     C2_L=4 & buffer_size2>0   & READ_2=2  ->  (C2_L'=5)& (READ_2'=3) & (v2_s'=BUFFER2_3_s) & (v2_r'=BUFFER2_3_r) & (v2_ts'=BUFFER2_3_ts) & (v2_pl'=BUFFER2_3_pl) & (buffer_size2'=buffer_size2-1);

[PULL_BUFFER2_4]     C2_L=4 & buffer_size2>0   & READ_2=3  ->  (C2_L'=5)& (READ_2'=0) & (v2_s'=BUFFER2_4_s) & (v2_r'=BUFFER2_4_r) & (v2_ts'=BUFFER2_4_ts) & (v2_pl'=BUFFER2_4_pl) & (buffer_size2'=buffer_size2-1);


[EMPTY2]      C2_L=4 & buffer_size2=0    ->  (C2_L'=1);

[RECEIVE_C2]  C2_L=5 & (v2_s>0) & (v2_r>0)  & (v2_ts>0) &  (v2_pl>0) ->  (C2_L'=1) & (v2_s'=EMPTY) & (v2_r'=EMPTY) & (v2_ts'=EMPTY) & (v2_pl'=EMPTY);

endmodule




//crane 2 component
module Crane_2
  LC2 : [0..3] init  1;
  m3_s: [-1..2] init EMPTY;
  m3_r: [-1..2] init EMPTY;
  m3_ts: [-1..10] init EMPTY;
  m3_pl: [-10..10] init EMPTY;

[RECEIVE_C2]   LC2=1 & (m3_s=EMPTY)& (m3_r=EMPTY)& (m3_ts=EMPTY)& (m3_pl=EMPTY)    -> (LC2'=2) & (m3_s'=v2_s) & (m3_r'=v2_r) & (m3_ts'=v2_ts) & (m3_pl'=v2_pl);
//External port LIFT
[LIFT]       LC2=2   -> (LC2'=1) & (m3_s'=EMPTY) & (m3_r'=EMPTY) & (m3_ts'=EMPTY) & (m3_pl'=EMPTY);
endmodule
