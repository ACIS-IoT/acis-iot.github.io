mdp

//PA model with buffer size = 2
// The model is checked with properties file scalability.pctl


const int cr1 = 1;
const int cr2 = 2;
const int LIFTING = 1;

const int POSITION = 1;
const int d;

const int TAMPERLIFT = 0;
const int EMPTY = -1;
const int NUM=2*MAX;

const int MAX=4;

const double LAMBDA1;//pushing rate
const double LAMBDA2=1-LAMBDA1;//pulling rate

const double LAMBDA3=1-LAMBDA4;
const double LAMBDA4;//tampering and spoofing rate


const int vx_s=  TAMPERLIFT;
const int vx_r=  TAMPERLIFT;
const int vx_ts= TAMPERLIFT;
const int vx_pl= TAMPERLIFT;



const int dr=1;

module Drone
  SCANNED_ID : [0..2] init cr1;

  m1_s: [-1..2] init  dr;
  m1_r: [-1..2] init -1;
  m1_ts: [-1..10] init 0;
  m1_pl: [-1..10] init -1;

  t: [-1..NUM] init 0;
  ld:[0..3] init 1;

[        ]   ld=1 & (m1_ts<10) 	 -> (ld'=2) & (m1_r'=SCANNED_ID)& (m1_pl'=d)& (m1_ts'=m1_ts+1);
[TRANSMIT]   ld=2 & (t<NUM)& (m1_r=cr1)  -> (ld'=1) &(t'=t+1)& (SCANNED_ID'=cr2);
[TRANSMIT2]  ld=2 & (t<NUM)& (m1_r=cr2)  -> (ld'=1) &(t'=t+1)& (SCANNED_ID'=cr1);

endmodule

module Connector_1

BUFFER_1 : [-1..2] init -1;

BUFFER_1_s: [-1..2] init -1;

BUFFER_1_r: [-1..2] init -1;

BUFFER_1_ts: [-1..10] init -1;

BUFFER_1_pl: [-1..10] init -1;


BUFFER_2: [-1..2] init -1;

BUFFER_2_s: [-1..2] init -1;

BUFFER_2_r: [-1..2] init -1;

BUFFER_2_ts: [-1..10] init -1;

BUFFER_2_pl: [-1..10] init -1;


BUFFER_3: [-1..2] init -1;

BUFFER_3_s: [-1..2] init -1;

BUFFER_3_r: [-1..2] init -1;

BUFFER_3_ts: [-1..10] init -1;

BUFFER_3_pl: [-1..10] init -1;


v_s: [-1..2] init -1;
v_r: [-1..2] init -1;
v_ts: [-1..10] init -1;
v_pl: [-1..10] init -1;




BUFFER_SIZE: [0..10] init 0;
L : [1..6] init 1;


[INITIAL]  L=1 & (BUFFER_SIZE<MAX | BUFFER_SIZE>0) ->  LAMBDA1:(L'=2) + LAMBDA2:(L'=4);

[TRANSMIT] L=2 & BUFFER_SIZE<MAX  ->  LAMBDA3:(L'=3) &(v_s'=m1_s)&(v_r'=m1_r)&(v_ts'=m1_ts)&(v_pl'=m1_pl) + LAMBDA4:(L'=3) &(v_s'=m1_s)&(v_r'=vx_r)&(v_ts'=m1_ts)&(v_pl'=m1_pl);

[FULL]     L=2 & BUFFER_SIZE=MAX  ->  (L'=1);



[PUSH_BUFFER_1]     L=3 & BUFFER_SIZE<MAX & BUFFER_1=-1                ->  (L'=1) & (BUFFER_1'=1) & (BUFFER_1_s'=v_s) & (BUFFER_1_r'=v_r) & (BUFFER_1_ts'=v_ts) & (BUFFER_1_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);

[PUSH_BUFFER_2]     L=3 & BUFFER_SIZE<MAX & BUFFER_1!=-1 & BUFFER_2=-1 ->  (L'=1) & (BUFFER_2'=1) & (BUFFER_2_s'=v_s) & (BUFFER_2_r'=v_r) & (BUFFER_2_ts'=v_ts) & (BUFFER_2_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);

[PUSH_BUFFER_3]     L=3 & BUFFER_SIZE<MAX & BUFFER_1!=-1 & BUFFER_2!=-1 & BUFFER_3=-1->  (L'=1) & (BUFFER_2'=1) & (BUFFER_3_s'=v_s) & (BUFFER_3_r'=v_r) & (BUFFER_3_ts'=v_ts) & (BUFFER_3_pl'=v_pl) & (BUFFER_SIZE'=BUFFER_SIZE+1);


[PULL_BUFFER_1]     L=4 & BUFFER_SIZE>0   & BUFFER_1!=-1               ->  (L'=5) & (v_s'=BUFFER_1_s) & (v_r'=BUFFER_1_r) & (v_ts'=BUFFER_1_ts) & (v_pl'=BUFFER_1_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) & (BUFFER_1'=-1);

[PULL_BUFFER_2]     L=4 & BUFFER_SIZE>0   & BUFFER_1=-1 & BUFFER_2!=-1 ->  (L'=5) & (v_s'=BUFFER_2_s) & (v_r'=BUFFER_2_r) & (v_ts'=BUFFER_2_ts) & (v_pl'=BUFFER_2_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) & (BUFFER_2'=-1);

[PULL_BUFFER_3]     L=4 & BUFFER_SIZE>0   & BUFFER_1=-1 & BUFFER_2!=-1 & BUFFER_3!=-1->  (L'=5) & (v_s'=BUFFER_3_s) & (v_r'=BUFFER_3_r) & (v_ts'=BUFFER_3_ts) & (v_pl'=BUFFER_3_pl) & (BUFFER_SIZE'=BUFFER_SIZE-1) & (BUFFER_3'=-1);

[EMPTY]    L=4 & BUFFER_SIZE=0    ->  (L'=1);

[RECEIVE_C1]  L=5 & (v_s>0) & (v_r>0)  & (v_ts>0) &  (v_pl>0)->  (L'=1) & (v_s'=EMPTY) & (v_r'=EMPTY) & (v_ts'=EMPTY) & (v_pl'=EMPTY);

endmodule



//crane 1 component
module Crane_Crane_1
  LC1 : [0..3] init  1;
  m2_s: [-1..2] init EMPTY;
  m2_r: [-1..2] init EMPTY;
  m2_ts: [-1..10] init EMPTY;
  m2_pl: [-1..10] init EMPTY;


[RECEIVE_C1]   LC1=1 & (m2_s=EMPTY)& (m2_r=EMPTY)& (m2_ts=EMPTY)& (m2_pl=EMPTY)   -> (LC1'=2) & (m2_s'=v_s) & (m2_r'=v_r) & (m2_ts'=v_ts) & (m2_pl'=v_pl);
//External port LIFT 
[LIFT]       LC1=2   -> (LC1'=1) & (m2_s'=EMPTY) & (m2_r'=EMPTY) & (m2_ts'=EMPTY) & (m2_pl'=EMPTY);
endmodule


rewards "num_mess_c1"
   [RECEIVE_C1]  true : 1;
endrewards

rewards "num_mess_c2"
   [RECEIVE_C2]  true : 1;
endrewards

module Connector_2


BUFFER2_1 : [-1..2] init -1;

BUFFER2_1_s: [-1..2] init -1;

BUFFER2_1_r: [-1..2] init -1;

BUFFER2_1_ts: [-1..10] init -1;

BUFFER2_1_pl: [-1..10] init -1;


BUFFER2_2: [-1..2] init -1;

BUFFER2_2_s: [-1..2] init -1;

BUFFER2_2_r: [-1..2] init -1;

BUFFER2_2_ts: [-1..10] init -1;

BUFFER2_2_pl: [-1..10] init -1;


BUFFER2_3: [-1..2] init -1;

BUFFER2_3_s: [-1..2] init -1;

BUFFER2_3_r: [-1..2] init -1;

BUFFER2_3_ts: [-1..10] init -1;

BUFFER2_3_pl: [-1..10] init -1;


v2_s: [-1..2] init -1;
v2_r: [-1..2] init -1;
v2_ts: [-1..10] init -1;
v2_pl: [-1..10] init -1;

buffer_size2: [0..10] init 0;

s2 : [1..6] init 1;

vid2: [-1..2] init EMPTY;

[INITIAL2]  s2=1 & (buffer_size2<MAX | buffer_size2>0) ->  LAMBDA1:(s2'=2) + LAMBDA2:(s2'=4);

[TRANSMIT2] s2=2 & buffer_size2<MAX  ->  LAMBDA3:(s2'=3) &(v2_s'=m1_s)&(v2_r'=m1_r)&(v2_ts'=m1_ts)&(v2_pl'=m1_pl)+LAMBDA4:(s2'=3) &(v2_s'=vx_s)&(v2_r'=vx_r)&(v2_ts'=vx_r)&(v2_pl'=vx_pl);

[FULL2]     s2=2 & buffer_size2=MAX  ->  (s2'=1);

[PUSH_BUFFER2_1]     s2=3 & buffer_size2<MAX & BUFFER2_1=-1                ->  (s2'=1) & (BUFFER2_1'=1)  & (BUFFER2_1_s'=v2_s) & (BUFFER2_1_r'=v2_r) & (BUFFER2_1_ts'=v2_ts) & (BUFFER2_1_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);

[PUSH_BUFFER2_2]     s2=3 & buffer_size2<MAX & BUFFER2_1!=-1   & BUFFER2_2=-1 ->  (s2'=1)& (BUFFER2_2'=1)  & (BUFFER2_2_s'=v2_s) & (BUFFER2_2_r'=v2_r) & (BUFFER2_2_ts'=v2_ts) & (BUFFER2_2_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);

[PUSH_BUFFER2_3]     s2=3 & buffer_size2<MAX & BUFFER2_1!=-1    & BUFFER2_2!=-1 & BUFFER2_3=-1  ->  (s2'=1)& (BUFFER2_3'=1)  & (BUFFER2_3_s'=v2_s) & (BUFFER2_3_r'=v2_r) & (BUFFER2_3_ts'=v2_ts) & (BUFFER2_3_pl'=v2_pl) & (buffer_size2'=buffer_size2+1);


[PULL_BUFFER2_1]     s2=4 & buffer_size2>0   & BUFFER2_1!=-1               ->   (s2'=1) & (v2_s'=BUFFER2_1_s) & (v2_r'=BUFFER2_1_r) & (v2_ts'=BUFFER2_1_ts) & (v2_pl'=BUFFER2_1_pl) & (BUFFER2_1'=-1);

[PULL_BUFFER2_2]     s2=4 & buffer_size2>0   & BUFFER2_1=-1 & BUFFER2_2!=-1 ->  (s2'=1) & (v2_s'=BUFFER2_2_s) & (v2_r'=BUFFER2_2_r) & (v2_ts'=BUFFER2_2_ts) & (v2_pl'=BUFFER2_2_pl) & (buffer_size2'=buffer_size2-1) & (BUFFER2_2'=-1);

[PULL_BUFFER2_3]     s2=4 & buffer_size2>0   & BUFFER2_1=-1 & BUFFER2_2=-1 & BUFFER2_3!=-1 ->  (s2'=1) & (v2_s'=BUFFER2_3_s) & (v2_r'=BUFFER2_3_r) & (v2_ts'=BUFFER2_3_ts) & (v2_pl'=BUFFER2_3_pl) & (buffer_size2'=buffer_size2-1) & (BUFFER2_3'=-1);


[EMPTY2]    s2=4 & buffer_size2=0    ->  (s2'=1);

[RECEIVE_C2]  s2=1 & (v2_s>0) & (v2_r>0)  & (v2_ts>0) &  (v2_pl>0) ->  (s2'=1) & (v2_s'=EMPTY) & (v2_r'=EMPTY) & (v2_ts'=EMPTY) & (v2_pl'=EMPTY);

endmodule



//crane 2 component
module Crane_Crane_2
  LC2 : [0..3] init  1;
  m3_s: [-1..2] init EMPTY;
  m3_r: [-1..2] init EMPTY;
  m3_ts: [-1..10] init EMPTY;
  m3_pl: [-1..10] init EMPTY;

[RECEIVE_C2]   LC2=1 & (m3_s=EMPTY)& (m3_r=EMPTY)& (m3_ts=EMPTY)& (m3_pl=EMPTY)    -> (LC2'=2) & (m3_s'=v2_s) & (m3_r'=v2_r) & (m3_ts'=v2_ts) & (m3_pl'=v2_pl);
//External port LIFT
[LIFT]       LC2=2   -> (LC2'=1) & (m3_s'=EMPTY) & (m3_r'=EMPTY) & (m3_ts'=EMPTY) & (m3_pl'=EMPTY);
endmodule
